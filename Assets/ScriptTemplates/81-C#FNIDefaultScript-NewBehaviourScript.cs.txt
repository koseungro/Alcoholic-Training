// TODO : 아래의 부분을 작성합니다. 작성 후 이 줄은 삭제바랍니다.
/// 작성자: #AUTHOR#
/// 작성일: #DATE#
/// 수정일: 
/// 저작권: Copyright(C) FNI Co., LTD. 
/// 수정이력
/// **** 수정이력은 아래와 같이 추가합니다. 숙지한 후 삭제바랍니다. ***
/// (2020-02-27) 홍길동
/// 1. ZoomByDistance 오류 수정
/// 2. OrbitCenterImage 표시 기능 추가
/// 3. DoSomething 이름수정


// TODO : 아래의 주석은 읽고 삭제해도 됩니다.
/// 코드 규칙
/// 01. 심플한 코드 작성을 지향한다.
/// 02. 정확한 의미 전달을 위해 전체 단어를 사용한다.
/// 03. 잘 알려진 약어는 모두 대문자를 사용한다.
/// 04. 의미가 명확하지 않은 축약형, 불필요한 _(언더바) 사용을 지양한다.
/// 
/// 05. 수정 부분 표시는 아래와 같이 작성한다.
///      // 변경사항 : [mod | add | del] [날짜] : [내용]
///      [mod] 수정
///      [add] 추가
///      [del] 삭제
///
/// 06. 미완성이나 추후 수정이 필요한 부분은 아래와 같이 작성한다.
///      // TODO : 내용
/// 
/// 07. 주석은 아래와 같이 작성한다.
///      1) //[공백]설명
///      2) 클래스, public변수, public property, public 메소드는 <summary>주석을 사용한다
///
/// 08. 탭(tap)을 공백 삽입 대신 탭(tap) 유지로 설정한다.
/// 09. 코드문, 중괄호 선언은 한 줄에 하나씩만 작성한다. (부득이 줄 바꿈의 경우 들여쓰기)
/// 10. 반복문에서 세미콜론 구분 시 공백을 삽입한다.
/// 11. Class & Struct는 Pascal 표기법을 따르며 명사형을 사용한다.
/// 12. interface에는 "I" 접두어 + Pascal 표기법을 사용한다.
/// 13. Start()와 Update()는 내용 없을 시 제거한다.
/// 14. 함수는 Pascal 표기법을 따르며 동사형을 사용한다.
/// 15. 이벤트 핸들러 기능 메소드 : On + 목적어 + 수동태 형태 (On은 생략가능) 허용
/// 16. 코루틴 메소드 : 메소드명 뒤에 "Routine"을 붙여서 사용한다. (메소드명 + "Routine")
/// 17. 비동기 메소드 : 메소드명 뒤에 "Async"를 붙여서 사용한다. (메소드명 + "Async")
/// 18. property는 Pascal표기법 사용 및 명사형을 사용한다.
/// 19. 멤버 변수, 함수 인자, 함수 내 지역변수는 Camel 표기법을 사용한다.
/// 20. var 사용을 지양한다.
/// 21. bool 형일 경우 "is / can / has / does" + 형용사 또는 분사 형태로 사용한다.
/// 22. Array는 복수형 접미사, 복수형 명사를 사용하고 List 변수명 뒤에 "List"를 붙여서 사용한다.
/// 23. Const, readonly 변수명 앞에 "k"를 붙여서 사용한다. ("k" + 변수명)
/// 24. Enum은 Pascal 표기법 사용 및 명사형을 사용한다.
/// 25. Enum은 "Type / Option / Style / Code / State / Status" 와 같은 접미어를 사용한다.
/// 26. Enum은 비트플래그로 사용되는 경우 "Flag" 접미어를 사용한다.
/// 27. Delegate는 Pascal 표기법을 따르며 명사형을 사용한다.
/// 28. Delegate는 변수명 + "Action"(~Action) 또는 "On" + 변수명 +"Callback"으로 사용한다.
/// 29. event로 사용되는 Delegate는 변수명 뒤에 "Handler"를 붙여서 사용한다.
/// 30. Event은 Pascal 표기법을 따르며 명사 + 과거분사형을 사용한다.


using FNI.Common.Utils;
using System;
using System.Collections;
using System.Collections.Generic;
using TMPro;
#if UNITY_EDITOR
using UnityEditor;
#endif
using UnityEngine;
using UnityEngine.UI;

namespace FNI
{
    public class #SCRIPTNAME# : MonoBehaviour
    {
        // 해당 기능은 인스펙터에서 컴포넌트의 리셋 메뉴를 누르거나, 새로 컴포넌트를 붙일 때 실행되는 함수로
        // 에디터에서만 실행되는 함수입니다.
        // 컴포넌트의 변수를 신의 게임오브젝트 혹은 리소스와 연결하는 작업을 수작업보다는 자동으로 해야 추후 인수인계가 되더라도 관리하기가 좋으며,
        // 리스트를 설정하는 작업도 일일히 할 필요가 없습니다.
        // 이 함수를 만들고 리셋을 실행하면 Awake, Start에서 찾을 필요가 없습니다.
        private void Reset()
        {
            // 예시이므로 삭제하면 됩니다.
            // Image comp1 = GetComponent<Image>();
            // Image comp2 = transform.FindComponent<Image>("게임오브젝트명");
            // Toggle comp3 = transform.FindComponent<Toggle>("Panel_Content/Root_ListView/ScrollView_Head/Col1/Toggle_Number");

            // dropdownType.ClearOptions();
            // dropdownType.AddOptions(new List<string>(Enum.GetNames(typeof(EnumType))));

            // Sprite normalSprite = (Sprite)AssetDatabase.LoadAssetAtPath("Assets/FNI/Global/UI/Button/btn_small_normal.png", typeof(Sprite));
        }
    }
}